import java.util.*;
import java.io.FileReader;
import java.io.FileReader.*;
import java.io.BufferedReader;

class symbolTable{
    String SymbolTab[][]=new String[100][3];
    public void insertIntoSymTab(String a, String b, String c,int symTabLine){
        SymbolTab[symTabLine][0]=a;
		SymbolTab[symTabLine][1]=b;
		SymbolTab[symTabLine][2]=c;
    }
    public void getSymTable(int symTabLine){
        System.out.println("\n\n	SYMBOL TABLE		");
		System.out.println("______________________________");			
		System.out.println("SYMBOL\tADDRESS\tLENGTH");
		System.out.println("______________________________");			
		for(int i=0;i<symTabLine;i++){
				System.out.println(SymbolTab[i][0]+"\t"+SymbolTab[i][1]+"\t"+SymbolTab[i][2]);
        }
		System.out.println();
    }
}
class opTable{
    String OpTab[][]=new String[100][3];
    public void getOpTable(int opTabLine){
        System.out.println("\n\n	OPCODE TABLE		");
		System.out.println("______________________________");			
		System.out.println("MNEMONIC\tCLASS\tINFO");
		System.out.println("______________________________");			
		for(int i=0;i<opTabLine;i++){
			System.out.println(OpTab[i][0]+"\t\t"+OpTab[i][1]+"\t"+OpTab[i][2]);
        }
		System.out.println("\n");
    }
    public void insertIntoOpTab(String a,String b,int opTabLine){
        OpTab[opTabLine][1]=a;
		OpTab[opTabLine][2]=b;
    }
}
class litTable{
    String LitTab[][]=new String[100][2];
    public void getLitTable(int litTabLine){
        System.out.println("\n\n   LITERAL TABLE		");
	    System.out.println("______________");			
	    System.out.println("LITERAL\tADDRESS");
	    System.out.println("______________");			
	    for(int i=0;i<litTabLine;i++){
		    System.out.println(LitTab[i][0]+"\t"+LitTab[i][1]);
        }
	    System.out.println("\n");
    }
    public void insertIntoLitTab(String a,String b,int litTabLine){
        LitTab[litTabLine][0]=a;
		LitTab[litTabLine][1]=b;
    }
}
class poolTable{
    int PoolTab[]=new int[100];
    public void getPoolTable(int poolTabLine){
    System.out.println("\n\n   POOL TABLE		");
    System.out.println("______________");			
    System.out.println("LITERAL NUMBER");
    System.out.println("______________");			
    for(int i=0;i<poolTabLine;i++){
        System.out.println(PoolTab[i]);
    }
    System.out.println("\n");
    }
}
class passII{
	String IS [] = {"STOP","ADD","SUB","MULT","MOVER","MOVEM","COMP","BC","DIV","READ","PRINT"};
	String reg [] = {"NULL","AREG","BREG","CREG","DREG"};
	String AD [] = {"START","END","EQU","ORIGIN","LTORG"};
}

public class Assignment_1 {
    public static void main(String[] args) throws Exception {
        symbolTable sp = new symbolTable();
        opTable op = new opTable();
        litTable lt = new litTable();
        poolTable pt = new poolTable();
		passII p2 = new passII();
        FileReader FP= new FileReader("E:\\LP-1\\Assignment_1\\input.txt");
		BufferedReader bufferedReader = new BufferedReader(FP);
		FileReader FP2= new FileReader("E:\\LP-1\\Assignment_1\\input.txt");
		BufferedReader bufferedReader2 = new BufferedReader(FP2);	
        String line=null;
		int line_count=0,LC=0,symTabLine=0,opTabLine=0,litTabLine=0,poolTabLine=0;
		//Read Until End of File
        while((line = bufferedReader.readLine()) != null)
		{
			String[] codes = line.split("\t");
			//Read Start and set Location Counter (LC) to given address
			if(line_count==0)
			{
				LC=Integer.parseInt(codes[1]);
			}
			//Read Lines after Start <>
            else{
				//If there is label -> insert into Symbol table
                if(!codes[0].equals(""))
				{
                    
                    sp.insertIntoSymTab(codes[0],Integer.toString(LC),Integer.toString(1),symTabLine);
					symTabLine++;  
				}
				//If there is declarative Statement -> insert int Symbol table
                else if(codes[1].equalsIgnoreCase("DS")||codes[1].equalsIgnoreCase("DC"))
				{
                    sp.insertIntoSymTab(codes[0],Integer.toString(LC),Integer.toString(1),symTabLine);
					symTabLine++;
				}
				//If there are any literals in the line (after LTORG) -> Fill literal table
                if(codes.length==3 && codes[2].charAt(0)=='=')
				{
                    lt.insertIntoLitTab(codes[2],Integer.toString(LC),litTabLine);
					litTabLine++;
				}
				// Check for AD or IS
                else if(codes[1]!=null)
				{
                    op.OpTab[opTabLine][0]=codes[1];
					if(codes[1].equalsIgnoreCase("START")||codes[1].equalsIgnoreCase("END")||codes[1].equalsIgnoreCase("ORIGIN")||codes[1].equalsIgnoreCase("EQU")||codes[1].equalsIgnoreCase("LTORG"))
					{
						for (int i = 0; i <= 4; i++) {
							if(codes[1].equals(p2.AD[i])){
								String str = String.valueOf(i);
								op.insertIntoOpTab("AD",str,opTabLine);
							}
						}											
					}			     	
					else if(codes[1].equalsIgnoreCase("DS")||codes[1].equalsIgnoreCase("DC"))
					{
						if(codes[1].equalsIgnoreCase("DS")){
							op.insertIntoOpTab("DS","6",opTabLine);
						}
						else if(codes[1].equalsIgnoreCase("DC")){
							op.insertIntoOpTab("DC","7",opTabLine);
						}					
					}
					else
					{
						for (int i = 0; i <= 10; i++) {
							if(codes[1].equals(p2.IS[i])){
								String str = String.valueOf(i);
								op.insertIntoOpTab("IS",str,opTabLine);
							}
						}
					}
					opTabLine++;
				}
            }
            line_count++;
			LC++;
        }
        sp.getSymTable(symTabLine);
        op.getOpTable(opTabLine);
        lt.getLitTable(litTabLine);
		//Adressing the literals using Pool table
		for(int i=0;i<litTabLine;i++)
		{
			if(lt.LitTab[i][0]!=null && lt.LitTab[i+1][0]!=null )
			{
		        if(i==0)
			    {
				    pt.PoolTab[poolTabLine]=i+1;
				    poolTabLine++;
			    }
			else if(Integer.parseInt(lt.LitTab[i][1])<(Integer.parseInt(lt.LitTab[i+1][1]))-1)
				{	
					pt.PoolTab[poolTabLine]=i+2;
					poolTabLine++;
				}
			}
		}
        pt.getPoolTable(poolTabLine);
		//Printing The Intermediate Code:
		System.out.println("___________________________");
		System.out.println("\tMACHINE CODE ");
		System.out.println("___________________________");
        String line2=null;
		int j = 0;
		int pooltabcheck=pt.PoolTab[j];
		line2 = bufferedReader2.readLine();
		while((line2 = bufferedReader2.readLine()) != null){
			//Declaring boolean for flagcheck
			Boolean x = false;
			Boolean y = false;
			String[] codes = line2.split("\t");
			// System.out.println(codes[1]);
			for (int i = 0; i <= 10; i++){
				if(codes[1].equals(p2.IS[i])){
					System.out.print("0"+i+"\t");
				}
			}
			if(codes[1]=="DS"||codes[1]=="DC"){
				continue;
			}
			
			if(codes[1]=="STOP"||codes[1]=="END"){
				break;
			}
			if(codes.length==2){
				if(codes[1]=="LTORG"){
					// Literal Table addresses
					System.out.print("00"+"\t00"+"\t");
					for(int i =0;i<pooltabcheck;i++){
						System.out.print(lt.LitTab[i][0]);
					}
					//Increment Pooltable Index
					pooltabcheck=pt.PoolTab[j++];
				}
			}
			if(codes.length==3){
				//checking literals after LTORG
				if(codes[2].startsWith("=")){
					System.out.print("00"+"\t00"+"\t");
					for (int i = 0; i <= litTabLine; i++) {
						if(codes[2].equals(lt.LitTab[i][0])){
							System.out.print(lt.LitTab[i][1]);
						}
					}
				}
				else{
					//for more than 2 references
					String[] codes2 = codes[2].split(", ");
					if(codes2.length<2){
						//Checking for Registers
						for (int i = 1; i <= 4; i++){
							if(codes[2].equals(p2.reg[i])){
								x =false;
								System.out.print("0"+i+"\t");
							}
						}
						if(!x){
							System.out.print("00"+"\t");
						}
						//Checking for symbols
						for(int i= 0;i<symTabLine;i++){
							if(codes[2].equalsIgnoreCase(sp.SymbolTab[i][0])){
								System.out.print(sp.SymbolTab[i][1]);
							}
						}
					}
					else{
						//Checking for Registers
						for (int i = 1; i <= 4; i++){
							if(codes2[0].equals(p2.reg[i])){
								x =false;
								System.out.print("0"+i+"\t");
							}
						}
						for (int i = 1; i <= 4; i++){
							if(codes2[1].equals(p2.reg[i])){
								y = false;
								System.out.print("0"+i+"\t");
							}
						}
						if(x||y){
							System.out.print("00"+"\t");
						}
						//Checking for symbols
						for(int i= 0;i<symTabLine;i++){
							if(codes2[0].equalsIgnoreCase(sp.SymbolTab[i][0])){
								System.out.print(sp.SymbolTab[i][1]);
							}
						}
						for(int i= 0;i<symTabLine;i++){
							if(codes2[1].equalsIgnoreCase(sp.SymbolTab[i][0])){
								System.out.print(sp.SymbolTab[i][1]);
							}
						}
					}
				}
			}
			System.out.println();
		}
        bufferedReader.close();
    }   
}
